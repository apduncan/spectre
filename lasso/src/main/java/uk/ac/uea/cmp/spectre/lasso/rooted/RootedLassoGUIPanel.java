/*
 *  Suite of PhylogEnetiC Tools for Reticulate Evolution (SPECTRE)
 *  Copyright (C) 2017  UEA School of Computing Sciences
 *
 *  This program is free software: you can redistribute it and/or modify it under the term of the GNU General Public
 *  License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any
 *  later version.
 *
 *  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 *  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along with this program.  If not, see
 *  <http://www.gnu.org/licenses/>.
 */

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.ac.uea.cmp.spectre.lasso.rooted;

import uk.ac.uea.cmp.spectre.core.ui.gui.StatusTracker;
import uk.ac.uea.cmp.spectre.core.ui.gui.ToolHost;
import uk.ac.uea.cmp.spectre.lasso.LassoToolTab;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.util.Arrays;
import java.util.stream.Stream;

/**
 *
 * @author Anthony Duncan
 */
public class RootedLassoGUIPanel extends javax.swing.JPanel implements LassoToolTab {
    public static javax.swing.DefaultComboBoxModel<String> cliqueAlgModel() {
        String[] opts = Arrays.stream(CliqueFinderFactory.values()).map(v -> v.toString()).toArray(String[]::new);
        return new javax.swing.DefaultComboBoxModel<>(opts);
    }
    
    public static javax.swing.DefaultComboBoxModel<String> distAlgModel() {
        String[] opts = Arrays.stream(DistanceUpdaterFactory.values()).map(v -> v.toString()).toArray(String[]::new);
        return new javax.swing.DefaultComboBoxModel<>(opts);
    }
    /**
     * Creates new form RootedLassoGUIPanel
     */
    public RootedLassoGUIPanel() {
        initComponents();
        initTooltips();
        this.inputComponents = new Component[] {cmbDistanceAlg, cmbCliqueAlg, spnLassoRun, spnCliqueAttempts};
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlClique = new javax.swing.JPanel();
        lblCliqueAlg = new javax.swing.JLabel();
        cmbCliqueAlg = new javax.swing.JComboBox<>();
        lblCliqueAttempts = new javax.swing.JLabel();
        spnCliqueAttempts = new javax.swing.JSpinner(new SpinnerNumberModel(10, 0, null, 1));
        pnlDistance = new javax.swing.JPanel();
        lblDistanceAlg = new javax.swing.JLabel();
        cmbDistanceAlg = new javax.swing.JComboBox<>();
        pnlLasso = new javax.swing.JPanel();
        spnLassoRun = new javax.swing.JSpinner(new SpinnerNumberModel(10, 0, null, 1));
        lblLassoRun = new javax.swing.JLabel();

        pnlClique.setBorder(javax.swing.BorderFactory.createTitledBorder("Clique Options"));

        lblCliqueAlg.setText("Algorithm");

        cmbCliqueAlg.setModel(RootedLassoGUIPanel.cliqueAlgModel());

        lblCliqueAttempts.setText("Attempts");

        javax.swing.GroupLayout pnlCliqueLayout = new javax.swing.GroupLayout(pnlClique);
        pnlClique.setLayout(pnlCliqueLayout);
        pnlCliqueLayout.setHorizontalGroup(
            pnlCliqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCliqueLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCliqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCliqueLayout.createSequentialGroup()
                        .addComponent(lblCliqueAlg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbCliqueAlg, 0, 168, Short.MAX_VALUE))
                    .addGroup(pnlCliqueLayout.createSequentialGroup()
                        .addComponent(lblCliqueAttempts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spnCliqueAttempts, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlCliqueLayout.setVerticalGroup(
            pnlCliqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCliqueLayout.createSequentialGroup()
                .addGroup(pnlCliqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCliqueAlg)
                    .addComponent(cmbCliqueAlg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCliqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCliqueAttempts)
                    .addComponent(spnCliqueAttempts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pnlDistance.setBorder(javax.swing.BorderFactory.createTitledBorder("Distance Update Options"));

        lblDistanceAlg.setText("Algorithm");

        cmbDistanceAlg.setModel(RootedLassoGUIPanel.distAlgModel());

        javax.swing.GroupLayout pnlDistanceLayout = new javax.swing.GroupLayout(pnlDistance);
        pnlDistance.setLayout(pnlDistanceLayout);
        pnlDistanceLayout.setHorizontalGroup(
            pnlDistanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDistanceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblDistanceAlg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbDistanceAlg, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlDistanceLayout.setVerticalGroup(
            pnlDistanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDistanceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblDistanceAlg)
                .addComponent(cmbDistanceAlg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnlLasso.setBorder(javax.swing.BorderFactory.createTitledBorder("RootedLasso Options"));

        lblLassoRun.setText("Runs");

        javax.swing.GroupLayout pnlLassoLayout = new javax.swing.GroupLayout(pnlLasso);
        pnlLasso.setLayout(pnlLassoLayout);
        pnlLassoLayout.setHorizontalGroup(
            pnlLassoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLassoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLassoRun)
                .addGap(28, 28, 28)
                .addComponent(spnLassoRun, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlLassoLayout.setVerticalGroup(
            pnlLassoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLassoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblLassoRun)
                .addComponent(spnLassoRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlClique, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDistance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlLasso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlClique, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlLasso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbCliqueAlg;
    private javax.swing.JComboBox<String> cmbDistanceAlg;
    private javax.swing.JLabel lblCliqueAlg;
    private javax.swing.JLabel lblCliqueAttempts;
    private javax.swing.JLabel lblDistanceAlg;
    private javax.swing.JLabel lblLassoRun;
    private javax.swing.JPanel pnlClique;
    private javax.swing.JPanel pnlDistance;
    private javax.swing.JPanel pnlLasso;
    private javax.swing.JSpinner spnCliqueAttempts;
    private javax.swing.JSpinner spnLassoRun;
    // End of variables declaration//GEN-END:variables
    private Component[] inputComponents;

    private void initTooltips() {
        cmbCliqueAlg.setToolTipText(RootedLassoOptions.DESC_CLIQUE_FINDER);
        spnCliqueAttempts.setToolTipText(RootedLassoOptions.DESC_CLIQUE_ATTEMPTS);
        cmbDistanceAlg.setToolTipText(RootedLassoOptions.DESC_DISTANCE_UPDATER);
        spnLassoRun.setToolTipText(RootedLassoOptions.DESC_LASSO_RUNS);
    }

    @Override
    public String tabTitle() {
        return "Equidistant";
    }

    @Override
    public void runTool(File input, File output, ToolHost host, StatusTracker tracker) {
        //Get the remaining settings for RootedLasso and put into options object
        Integer attempts = null;
        try {
            attempts = Integer.class.cast(spnCliqueAttempts.getValue());
        } catch (Exception e) {
            host.showErrorDialog("Number of clique attempts invalid");
            return;
        }
        Integer runs = null;
        try {
            runs = Integer.class.cast(spnLassoRun.getValue());
        } catch (Exception e) {
            host.showErrorDialog("Number of RootedLasso runs invalid");
            return;
        }
        if(runs < 1 || attempts < 1) {
            host.showErrorDialog("Numbers of runs and clique attempts must be above 0");
            return;
        }
        // Convert enum strings to enums
        CliqueFinderFactory finder = null;
        try {
            finder = CliqueFinderFactory.valueOf(String.class.cast(cmbCliqueAlg.getSelectedItem()));
        } catch (Exception e) {
            host.showErrorDialog("Clique finding method invalid");
            return;
        }
        DistanceUpdaterFactory updater = null;
        try {
            updater = DistanceUpdaterFactory.valueOf(String.class.cast(cmbDistanceAlg.getSelectedItem()));
        } catch (Exception e) {
            host.showErrorDialog("Distance update method invalid");
            return;
        }

        // Create RootedLassoOptions object
        RootedLassoOptions options = new RootedLassoOptions();
        options.setInput(input);
        options.setOutput(output);
        options.setLassoRuns(runs);
        options.setCliqueAttempts(attempts);
        options.setCliqueFinder(finder);
        options.setUpdater(updater);

        // Execute RootedLasso
        new RootedLassoRunner(host).runLasso(options, tracker);
    }

    @Override
    public void setRunning(final boolean running) {
        Stream.of(this.inputComponents).forEach(c -> c.setEnabled(running));
    }
}
